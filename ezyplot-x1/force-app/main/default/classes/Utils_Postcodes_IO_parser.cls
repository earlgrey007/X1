//
// Generated by JSON2APEX
//

public with sharing class Utils_Postcodes_IO_parser {

	public class Codes {
		public String admin_district {get;set;} 
		public String admin_county {get;set;} 
		public String admin_ward {get;set;} 
		public String parish {get;set;} 
		public String parliamentary_constituency {get;set;} 
		public String ccg {get;set;} 
		public String ccg_id {get;set;} 
		public String ced {get;set;} 
		public String nuts {get;set;} 
		public String lsoa {get;set;} 
		public String msoa {get;set;} 
		public String lau2 {get;set;} 

		public Codes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'admin_district') {
							admin_district = parser.getText();
						} else if (text == 'admin_county') {
							admin_county = parser.getText();
						} else if (text == 'admin_ward') {
							admin_ward = parser.getText();
						} else if (text == 'parish') {
							parish = parser.getText();
						} else if (text == 'parliamentary_constituency') {
							parliamentary_constituency = parser.getText();
						} else if (text == 'ccg') {
							ccg = parser.getText();
						} else if (text == 'ccg_id') {
							ccg_id = parser.getText();
						} else if (text == 'ced') {
							ced = parser.getText();
						} else if (text == 'nuts') {
							nuts = parser.getText();
						} else if (text == 'lsoa') {
							lsoa = parser.getText();
						} else if (text == 'msoa') {
							msoa = parser.getText();
						} else if (text == 'lau2') {
							lau2 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Codes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Integer status {get;set;} 
	public List<Result> result {get;set;} 

	public Utils_Postcodes_IO_parser(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'status') {
						status = parser.getIntegerValue();
					} else if (text == 'result') {
						result = arrayOfResult(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'Utils_Postcodes_IO_parser consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Result {
		public String postcode {get;set;} 
		public Integer quality {get;set;} 
		public Integer eastings {get;set;} 
		public Integer northings {get;set;} 
		public String country {get;set;} 
		public String nhs_ha {get;set;} 
		public Double longitude {get;set;} 
		public Double latitude {get;set;} 
		public String european_electoral_region {get;set;} 
		public String primary_care_trust {get;set;} 
		public String region {get;set;} 
		public String lsoa {get;set;} 
		public String msoa {get;set;} 
		public String incode {get;set;} 
		public String outcode {get;set;} 
		public String parliamentary_constituency {get;set;} 
		public String admin_district {get;set;} 
		public String parish {get;set;} 
		public Object admin_county {get;set;} 
		public String admin_ward {get;set;} 
		public Object ced {get;set;} 
		public String ccg {get;set;} 
		public String nuts {get;set;} 
		public Codes codes {get;set;} 
		public Integer distance {get;set;} 

		public Result(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'postcode') {
							postcode = parser.getText();
						} else if (text == 'quality') {
							quality = parser.getIntegerValue();
						} else if (text == 'eastings') {
							eastings = parser.getIntegerValue();
						} else if (text == 'northings') {
							northings = parser.getIntegerValue();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'nhs_ha') {
							nhs_ha = parser.getText();
						} else if (text == 'longitude') {
							longitude = parser.getDoubleValue();
						} else if (text == 'latitude') {
							latitude = parser.getDoubleValue();
						} else if (text == 'european_electoral_region') {
							european_electoral_region = parser.getText();
						} else if (text == 'primary_care_trust') {
							primary_care_trust = parser.getText();
						} else if (text == 'region') {
							region = parser.getText();
						} else if (text == 'lsoa') {
							lsoa = parser.getText();
						} else if (text == 'msoa') {
							msoa = parser.getText();
						} else if (text == 'incode') {
							incode = parser.getText();
						} else if (text == 'outcode') {
							outcode = parser.getText();
						} else if (text == 'parliamentary_constituency') {
							parliamentary_constituency = parser.getText();
						} else if (text == 'admin_district') {
							admin_district = parser.getText();
						} else if (text == 'parish') {
							parish = parser.getText();
						} else if (text == 'admin_county') {
							admin_county = parser.readValueAs(Object.class);
						} else if (text == 'admin_ward') {
							admin_ward = parser.getText();
						} else if (text == 'ced') {
							ced = parser.readValueAs(Object.class);
						} else if (text == 'ccg') {
							ccg = parser.getText();
						} else if (text == 'nuts') {
							nuts = parser.getText();
						} else if (text == 'codes') {
							codes = new Codes(parser);
						} else if (text == 'distance') {
							distance = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Result consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static Utils_Postcodes_IO_parser parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new Utils_Postcodes_IO_parser(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Result> arrayOfResult(System.JSONParser p) {
        List<Result> res = new List<Result>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Result(p));
        }
        return res;
    }


}